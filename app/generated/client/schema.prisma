datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
  output   = "../app/generated/client"
}

// 草稿表 - 简单结构
model Draft {
  id        String   @id @default(cuid())
  author    String?
  data      Json // 可存储任意数据结构
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  isDeleted Boolean  @default(false) // 标记是否已删除
}

// 正式文章表
model Article {
  id            String               @id @default(cuid())
  createdAt     DateTime             @default(now())
  updatedAt     DateTime             @updatedAt
  publishedAt   DateTime?
  author        String?
  status        ArticleStatus        @default(DRAFT)
  views         Int                  @default(0)
  likes         Int                  @default(0)
  translations  ArticleTranslation[] // 多语言内容关联
  wechatPublish WechatPublish?
  Comment       Comment[]
}

// 文章状态枚举
enum ArticleStatus {
  DRAFT // 草稿
  PENDING // 待审核
  PUBLISHED // 已发布
  REJECTED // 被拒绝
  ARCHIVED // 已归档
}

// 文章多语言内容表
model ArticleTranslation {
  id          String      @id @default(cuid())
  article     Article     @relation(fields: [articleId], references: [id], onDelete: Cascade)
  articleId   String
  lang        String // 语言代码，如 "cn", "en"
  title       String
  summary     String?
  content     String
  mediaFiles  String[] // 多媒体文件关联
  coverPrompt String?
  cover       String?
  categories  String[]
  keywords    String[]
  references  Reference[] // 参考文献关联
  createdAt   DateTime    @default(now())
  updatedAt   DateTime    @updatedAt

  @@unique([articleId, lang]) // 每种语言对应一篇文章只能有一个翻译
}

// 参考文献表
model Reference {
  id                   String             @id @default(cuid())
  articleTranslation   ArticleTranslation @relation(fields: [articleTranslationId], references: [id], onDelete: Cascade)
  articleTranslationId String
  caption              String
  url                  String
}

// 微信发布状态枚举
enum WechatPublishStatus {
  PENDING // 待发布
  PUBLISHED // 已发布
  FAILED // 发布失败
}

// 微信发布关联表
model WechatPublish {
  id        String              @id @default(cuid())
  article   Article             @relation(fields: [articleId], references: [id])
  articleId String              @unique
  status    WechatPublishStatus @default(PENDING)
  content   String // 发布的内容
  error     String? // 发布失败的错误信息
  mediaId   String? // 微信返回的 media_id
  publishId String? // 微信返回的 publish_id
  createdAt DateTime            @default(now())
  updatedAt DateTime            @updatedAt
}

// 保留原有的 Comment 模型，但改为关联 Article
model Comment {
  id        String   @id @default(cuid())
  articleId String
  content   String
  author    String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  article   Article  @relation(fields: [articleId], references: [id])
}
